{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ivoo Cumana\\\\OneDrive\\\\Documentos\\\\Micro procesadores\\\\proyecto\\\\Microprocesador\\\\frontend\\\\src\\\\components\\\\SimuladorCPU.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimuladorCPU = () => {\n  _s();\n  const [registros, setRegistros] = useState({\n    AX: 0,\n    BX: 0,\n    CX: 0,\n    DX: 0\n  });\n  const [flags, setFlags] = useState({\n    zero: false,\n    carry: false,\n    sign: false,\n    overflow: false\n  });\n  const [memoria, setMemoria] = useState(Array(256).fill(0));\n  const [codigo, setCodigo] = useState('');\n  const [output, setOutput] = useState([]);\n  const ejecutarInstruccion = () => {\n    // Implementar lógica de ejecución aquí\n    // Esto es solo un ejemplo básico\n    if (codigo.startsWith('MOV')) {\n      const partes = codigo.split(' ');\n      const destino = partes[1];\n      const valor = parseInt(partes[2]);\n      if (!isNaN(valor)) {\n        setRegistros(prev => ({\n          ...prev,\n          [destino]: valor\n        }));\n        setOutput([...output, `MOV: ${destino} = ${valor}`]);\n      }\n    }\n    // Agregar más instrucciones...\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simulador-cpu\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-codigo\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: codigo,\n        onChange: e => setCodigo(e.target.value),\n        placeholder: \"Ingrese c\\xF3digo de instrucciones...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: ejecutarInstruccion,\n        children: \"Ejecutar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-registros\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Registros\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), Object.entries(registros).map(([nombre, valor]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [nombre, \": \", valor]\n      }, nombre, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-flags\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Flags\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), Object.entries(flags).map(([nombre, valor]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [nombre, \": \", valor.toString()]\n      }, nombre, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-output\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Salida\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), output.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: line\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(SimuladorCPU, \"8qwJ0a9a//gS+E0sw5l+pCVmRmA=\");\n_c = SimuladorCPU;\nexport default SimuladorCPU;\nvar _c;\n$RefreshReg$(_c, \"SimuladorCPU\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SimuladorCPU","_s","registros","setRegistros","AX","BX","CX","DX","flags","setFlags","zero","carry","sign","overflow","memoria","setMemoria","Array","fill","codigo","setCodigo","output","setOutput","ejecutarInstruccion","startsWith","partes","split","destino","valor","parseInt","isNaN","prev","className","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Object","entries","map","nombre","toString","line","index","_c","$RefreshReg$"],"sources":["C:/Users/ivoo Cumana/OneDrive/Documentos/Micro procesadores/proyecto/Microprocesador/frontend/src/components/SimuladorCPU.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\ninterface Registros {\r\n  [key: string]: number;\r\n}\r\n\r\ninterface Flags {\r\n  zero: boolean;\r\n  carry: boolean;\r\n  sign: boolean;\r\n  overflow: boolean;\r\n}\r\n\r\nconst SimuladorCPU: React.FC = () => {\r\n  const [registros, setRegistros] = useState<Registros>({\r\n    AX: 0,\r\n    BX: 0,\r\n    CX: 0,\r\n    DX: 0,\r\n  });\r\n  \r\n  const [flags, setFlags] = useState<Flags>({\r\n    zero: false,\r\n    carry: false,\r\n    sign: false,\r\n    overflow: false,\r\n  });\r\n  \r\n  const [memoria, setMemoria] = useState<number[]>(Array(256).fill(0));\r\n  const [codigo, setCodigo] = useState<string>('');\r\n  const [output, setOutput] = useState<string[]>([]);\r\n\r\n  const ejecutarInstruccion = () => {\r\n    // Implementar lógica de ejecución aquí\r\n    // Esto es solo un ejemplo básico\r\n    if (codigo.startsWith('MOV')) {\r\n      const partes = codigo.split(' ');\r\n      const destino = partes[1];\r\n      const valor = parseInt(partes[2]);\r\n      \r\n      if (!isNaN(valor)) {\r\n        setRegistros(prev => ({ ...prev, [destino]: valor }));\r\n        setOutput([...output, `MOV: ${destino} = ${valor}`]);\r\n      }\r\n    }\r\n    // Agregar más instrucciones...\r\n  };\r\n\r\n  return (\r\n    <div className=\"simulador-cpu\">\r\n      <div className=\"panel-codigo\">\r\n        <textarea \r\n          value={codigo} \r\n          onChange={(e) => setCodigo(e.target.value)}\r\n          placeholder=\"Ingrese código de instrucciones...\"\r\n        />\r\n        <button onClick={ejecutarInstruccion}>Ejecutar</button>\r\n      </div>\r\n      \r\n      <div className=\"panel-registros\">\r\n        <h3>Registros</h3>\r\n        {Object.entries(registros).map(([nombre, valor]) => (\r\n          <div key={nombre}>\r\n            {nombre}: {valor}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"panel-flags\">\r\n        <h3>Flags</h3>\r\n        {Object.entries(flags).map(([nombre, valor]) => (\r\n          <div key={nombre}>\r\n            {nombre}: {valor.toString()}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"panel-output\">\r\n        <h3>Salida</h3>\r\n        {output.map((line, index) => (\r\n          <div key={index}>{line}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimuladorCPU;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}