{"ast":null,"code":"const validOperations = ['MOV', 'LOAD', 'STORE', 'ADD', 'SUB', 'MUL', 'DIV', 'CMP', 'JMP', 'JE', 'JNE', 'JG', 'JGE', 'JL', 'JLE', 'JZ', 'JNZ'];\nconst registerPattern = /^R\\d+$/;\nconst addressPattern = /^\\[\\d+\\]$/;\nexport const validateAssembler = code => {\n  const lines = code.split('\\n');\n  const errors = [];\n  lines.forEach((line, index) => {\n    const trimmedLine = line.trim();\n    if (trimmedLine === '') return;\n    const parts = trimmedLine.split(/\\s+/);\n    const operation = parts[0].toUpperCase();\n\n    // Validar operación\n    if (!validOperations.includes(operation)) {\n      errors.push({\n        line: index + 1,\n        message: `Operación desconocida: ${operation}`\n      });\n      return;\n    }\n\n    // Validar operandos según operación\n    const operands = parts.slice(1).join('').split(',');\n    switch (operation) {\n      case 'MOV':\n      case 'ADD':\n      case 'SUB':\n      case 'MUL':\n      case 'DIV':\n        if (operands.length !== 2) {\n          errors.push({\n            line: index + 1,\n            message: `${operation} requiere exactamente 2 operandos`\n          });\n        } else {\n          if (!registerPattern.test(operands[0])) {\n            errors.push({\n              line: index + 1,\n              message: `Primer operando debe ser un registro (ej: R1)`\n            });\n          }\n        }\n        break;\n      case 'LOAD':\n        if (operands.length !== 2) {\n          errors.push({\n            line: index + 1,\n            message: `LOAD requiere exactamente 2 operandos`\n          });\n        } else {\n          if (!registerPattern.test(operands[0])) {\n            errors.push({\n              line: index + 1,\n              message: `Primer operando debe ser un registro (ej: R1)`\n            });\n          }\n          if (!addressPattern.test(operands[1])) {\n            errors.push({\n              line: index + 1,\n              message: `Segundo operando debe ser una dirección de memoria (ej: [100])`\n            });\n          }\n        }\n        break;\n      case 'STORE':\n        if (operands.length !== 2) {\n          errors.push({\n            line: index + 1,\n            message: `STORE requiere exactamente 2 operandos`\n          });\n        } else {\n          if (!addressPattern.test(operands[0])) {\n            errors.push({\n              line: index + 1,\n              message: `Primer operando debe ser una dirección de memoria (ej: [100])`\n            });\n          }\n          if (!registerPattern.test(operands[1])) {\n            errors.push({\n              line: index + 1,\n              message: `Segundo operando debe ser un registro (ej: R1)`\n            });\n          }\n        }\n        break;\n      case 'CMP':\n        if (operands.length !== 2) {\n          errors.push({\n            line: index + 1,\n            message: `CMP requiere exactamente 2 operandos`\n          });\n        }\n        break;\n      case 'JMP':\n      case 'JE':\n      case 'JNE':\n      case 'JG':\n      case 'JGE':\n      case 'JL':\n      case 'JLE':\n      case 'JZ':\n      case 'JNZ':\n        if (operands.length !== 1) {\n          errors.push({\n            line: index + 1,\n            message: `${operation} requiere exactamente 1 operando (etiqueta)`\n          });\n        }\n        break;\n    }\n  });\n  return {\n    valid: errors.length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["validOperations","registerPattern","addressPattern","validateAssembler","code","lines","split","errors","forEach","line","index","trimmedLine","trim","parts","operation","toUpperCase","includes","push","message","operands","slice","join","length","test","valid"],"sources":["C:/Users/ivoo Cumana/OneDrive/Documentos/Micro procesadores/proyecto/Microprocesador/frontend/src/utils/assemblerValidator.ts"],"sourcesContent":["interface SyntaxError {\r\n  line: number;\r\n  message: string;\r\n}\r\n\r\ninterface ValidationResult {\r\n  valid: boolean;\r\n  errors: SyntaxError[];\r\n}\r\n\r\nconst validOperations = [\r\n  'MOV', 'LOAD', 'STORE', 'ADD', 'SUB', 'MUL', 'DIV', \r\n  'CMP', 'JMP', 'JE', 'JNE', 'JG', 'JGE', 'JL', 'JLE', 'JZ', 'JNZ'\r\n];\r\n\r\nconst registerPattern = /^R\\d+$/;\r\nconst addressPattern = /^\\[\\d+\\]$/;\r\n\r\nexport const validateAssembler = (code: string): ValidationResult => {\r\n  const lines = code.split('\\n');\r\n  const errors: SyntaxError[] = [];\r\n  \r\n  lines.forEach((line, index) => {\r\n    const trimmedLine = line.trim();\r\n    if (trimmedLine === '') return;\r\n    \r\n    const parts = trimmedLine.split(/\\s+/);\r\n    const operation = parts[0].toUpperCase();\r\n    \r\n    // Validar operación\r\n    if (!validOperations.includes(operation)) {\r\n      errors.push({\r\n        line: index + 1,\r\n        message: `Operación desconocida: ${operation}`\r\n      });\r\n      return;\r\n    }\r\n    \r\n    // Validar operandos según operación\r\n    const operands = parts.slice(1).join('').split(',');\r\n    \r\n    switch(operation) {\r\n      case 'MOV':\r\n      case 'ADD':\r\n      case 'SUB':\r\n      case 'MUL':\r\n      case 'DIV':\r\n        if (operands.length !== 2) {\r\n          errors.push({\r\n            line: index + 1,\r\n            message: `${operation} requiere exactamente 2 operandos`\r\n          });\r\n        } else {\r\n          if (!registerPattern.test(operands[0])) {\r\n            errors.push({\r\n              line: index + 1,\r\n              message: `Primer operando debe ser un registro (ej: R1)`\r\n            });\r\n          }\r\n        }\r\n        break;\r\n      \r\n      case 'LOAD':\r\n        if (operands.length !== 2) {\r\n          errors.push({\r\n            line: index + 1,\r\n            message: `LOAD requiere exactamente 2 operandos`\r\n          });\r\n        } else {\r\n          if (!registerPattern.test(operands[0])) {\r\n            errors.push({\r\n              line: index + 1,\r\n              message: `Primer operando debe ser un registro (ej: R1)`\r\n            });\r\n          }\r\n          if (!addressPattern.test(operands[1])) {\r\n            errors.push({\r\n              line: index + 1,\r\n              message: `Segundo operando debe ser una dirección de memoria (ej: [100])`\r\n            });\r\n          }\r\n        }\r\n        break;\r\n      \r\n      case 'STORE':\r\n        if (operands.length !== 2) {\r\n          errors.push({\r\n            line: index + 1,\r\n            message: `STORE requiere exactamente 2 operandos`\r\n          });\r\n        } else {\r\n          if (!addressPattern.test(operands[0])) {\r\n            errors.push({\r\n              line: index + 1,\r\n              message: `Primer operando debe ser una dirección de memoria (ej: [100])`\r\n            });\r\n          }\r\n          if (!registerPattern.test(operands[1])) {\r\n            errors.push({\r\n              line: index + 1,\r\n              message: `Segundo operando debe ser un registro (ej: R1)`\r\n            });\r\n          }\r\n        }\r\n        break;\r\n      \r\n      case 'CMP':\r\n        if (operands.length !== 2) {\r\n          errors.push({\r\n            line: index + 1,\r\n            message: `CMP requiere exactamente 2 operandos`\r\n          });\r\n        }\r\n        break;\r\n      \r\n      case 'JMP':\r\n      case 'JE':\r\n      case 'JNE':\r\n      case 'JG':\r\n      case 'JGE':\r\n      case 'JL':\r\n      case 'JLE':\r\n      case 'JZ':\r\n      case 'JNZ':\r\n        if (operands.length !== 1) {\r\n          errors.push({\r\n            line: index + 1,\r\n            message: `${operation} requiere exactamente 1 operando (etiqueta)`\r\n          });\r\n        }\r\n        break;\r\n    }\r\n  });\r\n  \r\n  return {\r\n    valid: errors.length === 0,\r\n    errors\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}